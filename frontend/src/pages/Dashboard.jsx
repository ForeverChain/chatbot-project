import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Dashboard = () => {
  const [user, setUser] = useState(null);
  const [chatbots, setChatbots] = useState([]);
  const [loading, setLoading] = useState(true);
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [showIntegrationForm, setShowIntegrationForm] = useState(false);
  const [integrationType, setIntegrationType] = useState('facebook');
  const [integrationToken, setIntegrationToken] = useState('');
  // Additional state for Facebook integration config
  const [pageId, setPageId] = useState('');
  const [appId, setAppId] = useState('');
  const [integrations, setIntegrations] = useState([]);
  // State for editing integration
  const [editingIntegrationId, setEditingIntegrationId] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      navigate('/login');
      return;
    }
    
    setUser(JSON.parse(userData));
    fetchChatbots(token);
    fetchIntegrations(token);
  }, [navigate]);

  const fetchChatbots = async (token) => {
    try {
      const response = await axios.get('http://localhost:3003/api/chatbots', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      setChatbots(response.data);
      setLoading(false);
    } catch (err) {
      console.error('Чатботуудыг татаж чадсангүй:', err);
      setLoading(false);
    }
  };

  const fetchIntegrations = async (token) => {
    try {
      const response = await axios.get('http://localhost:3003/api/integrations', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      setIntegrations(response.data);
    } catch (err) {
      console.error('Интеграциудыг татаж чадсангүй:', err);
    }
  };

  const handleCreateChatbot = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    
    try {
      const response = await axios.post('http://localhost:3003/api/chatbots', {
        name,
        description
      }, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      setChatbots([...chatbots, response.data]);
      setName('');
      setDescription('');
    } catch (err) {
      console.error('Чатбот үүсгэж чадсангүй:', err);
    }
  };

  const handleAddIntegration = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    
    try {
      // Prepare integration data based on type
      const integrationData = {
        type: integrationType,
        token: integrationToken
      };
      
      // Add config for Facebook integration
      if (integrationType === 'facebook') {
        integrationData.config = {
          pageId: pageId,
          // verifyToken will be generated by the backend
          appId: appId
        };
      }
      
      const response = await axios.post('http://localhost:3003/api/integrations', 
        integrationData,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      // If it's a Facebook integration, generate verify token
      if (integrationType === 'facebook' && response.data.id) {
        try {
          const verifyResponse = await axios.post(
            `http://localhost:3003/api/integrations/${response.data.id}/generate-verify-token`,
            {},
            {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            }
          );
          
          console.log('Verify token generated:', verifyResponse.data.verifyToken);
          alert(`Verify token generated: ${verifyResponse.data.verifyToken}`);
        } catch (verifyError) {
          console.error('Failed to generate verify token:', verifyError);
        }
      }
      
      setIntegrations([...integrations, response.data]);
      setIntegrationToken('');
      // Reset Facebook config fields
      setPageId('');
      setAppId('');
      setShowIntegrationForm(false);
    } catch (err) {
      console.error('Интеграци нэмж чадсангүй:', err);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    navigate('/login');
  };

  const handleDeleteChatbot = async (chatbotId) => {
    const token = localStorage.getItem('token');
    
    try {
      await axios.delete(`http://localhost:3003/api/chatbots/${chatbotId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      // Remove the deleted chatbot from the state
      setChatbots(chatbots.filter(chatbot => chatbot.id !== chatbotId));
    } catch (err) {
      console.error('Чатботыг устгаж чадсангүй:', err);
    }
  };

  const handleDeleteIntegration = async (integrationId) => {
    const token = localStorage.getItem('token');
    
    try {
      await axios.delete(`http://localhost:3003/api/integrations/${integrationId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      // Remove the deleted integration from the state
      setIntegrations(integrations.filter(integration => integration.id !== integrationId));
    } catch (err) {
      console.error('Интеграци устгаж чадсангүй:', err);
    }
  };

  const handleEditIntegration = (integration) => {
    setEditingIntegrationId(integration.id);
    setIntegrationType(integration.type);
    setIntegrationToken(integration.token || '');
    
    // Populate Facebook config fields if it's a Facebook integration
    if (integration.type === 'facebook' && integration.config) {
      setPageId(integration.config.pageId || '');
      setAppId(integration.config.appId || '');
    }
    
    setShowIntegrationForm(true);
  };

  const handleUpdateIntegration = async (e) => {
    e.preventDefault();
    const token = localStorage.getItem('token');
    
    try {
      // Prepare integration data based on type
      const integrationData = {
        type: integrationType,
        token: integrationToken
      };
      
      // Add config for Facebook integration
      if (integrationType === 'facebook') {
        integrationData.config = {
          pageId: pageId,
          appId: appId
        };
      }
      
      const response = await axios.put(
        `http://localhost:3003/api/integrations/${editingIntegrationId}`, 
        integrationData,
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      // Update the integration in the state
      setIntegrations(integrations.map(integration => 
        integration.id === editingIntegrationId ? response.data : integration
      ));
      
      // Reset form and state
      setIntegrationToken('');
      setPageId('');
      setAppId('');
      setShowIntegrationForm(false);
      setEditingIntegrationId(null);
    } catch (err) {
      console.error('Интеграци шинэчилж чадсангүй:', err);
    }
  };

  if (loading) {
    return <div className="dashboard">Ачааллаж байна...</div>;
  }

  return (
    <div className="dashboard">
      <header className="card">
        <h1>Хяналтын самбар</h1>
        <div className="user-info">
          <span>Тавтай морилно уу, {user?.name || user?.email}</span>
          <button onClick={handleLogout} className="btn secondary">Гарах</button>
        </div>
      </header>
      
      <main>
        <section className="create-chatbot card">
          <h2>Шинэ чатбот үүсгэх</h2>
          <form onSubmit={handleCreateChatbot}>
            <div className="form-group">
              <label htmlFor="name">Чатботын нэр</label>
              <input
                type="text"
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
                placeholder="Жишээ: Үйлчилгээний бот"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="description">Тайлбар</label>
              <textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows="3"
                placeholder="Чатботынхаа үүрэг үйлчилгээг тайлбарлана уу..."
              />
            </div>
            
            <button type="submit" className="btn primary">Чатбот үүсгэх</button>
          </form>
        </section>
        
        <section className="integrations card">
          <div className="integrations-header">
            <h2>Нийтийн сүлжээний интеграци</h2>
            <button 
              onClick={() => {
                setShowIntegrationForm(!showIntegrationForm);
                setEditingIntegrationId(null);
                // Reset form fields when opening for new integration
                if (!showIntegrationForm) {
                  setIntegrationToken('');
                  setPageId('');
                  setAppId('');
                }
              }}
              className="btn secondary"
            >
              {showIntegrationForm ? 'Цуцлах' : 'Интеграци нэмэх'}
            </button>
          </div>
          
          {showIntegrationForm && (
            <form onSubmit={editingIntegrationId ? handleUpdateIntegration : handleAddIntegration} className="integration-form card">
              <h3>{editingIntegrationId ? 'Интеграци шинэчлэх' : 'Интеграци нэмэх'}</h3>
              <div className="form-group">
                <label htmlFor="integrationType">Платформ</label>
                <select
                  id="integrationType"
                  value={integrationType}
                  onChange={(e) => setIntegrationType(e.target.value)}
                  disabled={editingIntegrationId} // Can't change type when editing
                >
                  <option value="facebook">Facebook</option>
                  <option value="instagram">Instagram</option>
                </select>
              </div>
              
              <div className="form-group">
                <label htmlFor="integrationToken">Хандалтын токен</label>
                <input
                  type="password"
                  id="integrationToken"
                  value={integrationToken}
                  onChange={(e) => setIntegrationToken(e.target.value)}
                  required
                  placeholder="Хандалтын токеноо оруулна уу"
                />
              </div>
              
              {/* Additional fields for Facebook integration */}
              {integrationType === 'facebook' && (
                <>
                  <div className="form-group">
                    <label htmlFor="pageId">Page ID</label>
                    <input
                      type="text"
                      id="pageId"
                      value={pageId}
                      onChange={(e) => setPageId(e.target.value)}
                      required
                      placeholder="Facebook Page ID"
                    />
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="appId">App ID</label>
                    <input
                      type="text"
                      id="appId"
                      value={appId}
                      onChange={(e) => setAppId(e.target.value)}
                      required
                      placeholder="Facebook App ID"
                    />
                  </div>
                </>
              )}
              
              <div className="form-actions">
                <button type="submit" className="btn primary">
                  {editingIntegrationId ? 'Шинэчлэх' : 'Интеграци нэмэх'}
                </button>
                <button 
                  type="button" 
                  onClick={() => {
                    setShowIntegrationForm(false);
                    setEditingIntegrationId(null);
                    // Reset form fields
                    setIntegrationToken('');
                    setPageId('');
                    setAppId('');
                  }}
                  className="btn secondary"
                >
                  Цуцлах
                </button>
              </div>
            </form>
          )}
          
          {integrations.length > 0 ? (
            <div className="integrations-list">
              {integrations.map((integration) => (
                <div key={integration.id} className="integration-item">
                  <div className="integration-info">
                    <span className="integration-type">{integration.type}</span>
                    {integration.config && typeof integration.config === 'object' && (
                      <span className="integration-config">
                        {integration.type === 'facebook' && integration.config.pageId && `Page: ${integration.config.pageId}`}
                      </span>
                    )}
                    <span className="integration-date">
                      Нэмсэн: {new Date(integration.createdAt).toLocaleDateString()}
                    </span>
                  </div>
                  <div className="integration-actions">
                    <button 
                      onClick={() => handleEditIntegration(integration)}
                      className="btn secondary small"
                    >
                      Засах
                    </button>
                    <button 
                      onClick={() => handleDeleteIntegration(integration.id)}
                      className="btn danger small"
                    >
                      Устгах
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p>Одоохондоо нийтийн сүлжээний интеграци нэмээгүй байна. Чатботоо Facebook эсвэл Instagram-тай холбоно уу.</p>
          )}
        </section>
        
        <section className="chatbots-list card">
          <h2>Таны чатботууд</h2>
          {chatbots.length === 0 ? (
            <p>Та одоохондоо чатбот үүсгээгүй байна. Эхний чатботоо үүсгээд эхлээрэй!</p>
          ) : (
            <div className="chatbots-grid">
              {chatbots.map((chatbot) => (
                <div key={chatbot?.id} className="chatbot-card card">
                  <h3>{chatbot?.name}</h3>
                  <p>{chatbot?.description || 'Тайлбар оруулаагүй'}</p>
                  <div className="chatbot-stats">
                    <span>Харилцан яриа: {chatbot?.conversations?.length}</span>
                  </div>
                  <div className="chatbot-actions">
                    <button 
                      onClick={() => navigate(`/flow-builder/${chatbot?.id}`)}
                      className="btn primary"
                    >
                      Удирдах
                    </button>
                    <button 
                      onClick={() => handleDeleteChatbot(chatbot?.id)}
                      className="btn secondary"
                    >
                      Устгах
                    </button>
                  </div>

                </div>
              ))}
            </div>
          )}
        </section>
      </main>
    </div>
  );
};

export default Dashboard;